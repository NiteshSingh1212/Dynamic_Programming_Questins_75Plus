class Solution {
public:

  //Method 04
// time complecity O(n) & space complecity O(constant)
   int solveSpaceOptimization(vector<int>& nums){
     int n=nums.size()-1;
     int prev2=0;
     int prev1=nums[0];
     int curr=0;
      for(int i=1;i<=n;i++){
          int temp=0;
          if(i-2>=0)
          temp=prev2;
      int include=temp+nums[i];
      int exclude=prev1+0;
       curr=max(include,exclude);
       prev2=prev1;
       prev1=curr;
      }
      return prev1;
 }
    int rob(vector<int>& nums) {
         int n=nums.size()-1;
   if(nums.size()==1) return nums[0];
         vector<int> ans1,ans2;
           for(int i=0;i<=n;i++){
               if(i!=0)
        ans1.push_back(nums[i]) ;
           
               if(i!=n)
        ans2.push_back(nums[i]) ;
           }
        int ans=max(solveSpaceOptimization(ans1),solveSpaceOptimization(ans2));
        return ans;
    }
};
