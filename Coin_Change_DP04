class Solution {
public:
  //Method 01
//   int solveRecursion(vector<int>& coins, int amount){
//       int mini=INT_MAX;
//       if(amount<0){
//           return INT_MAX;
//       }
//       if(amount==0){
//           return 0;
//       }
//       for(int i=0;i<coins.size();i++){
//           int ans=solveRecursion(coins,amount-coins[i]);
//           if(ans!=INT_MAX){
//       mini=min(mini,ans+1);
//           }
          
//       }return mini;
//   }

//Method 02

//   int solveMemoization(vector<int>& coins, int amount, vector<int>& dp){
//       int mini=INT_MAX;
//        int n=amount;
//       if(amount<0){
//           return INT_MAX;
//       }
//       if(amount==0){
//           return 0;
//       }
//       if(dp[n]!=-1){
//           return dp[n];
//       }
//       for(int i=0;i<coins.size();i++){
//           int ans=solveMemoization(coins,amount-coins[i],dp);
//           if(ans!=INT_MAX){
//       mini=min(mini,ans+1);
//           }
          
//       }
//       dp[n]=mini;
//       return dp[n];
//   }

    // Method 03
     int solveTabulation(vector<int>& coins, int amount){
      int mini=INT_MAX;
       int n=amount;
       vector<int> dp(n+1,INT_MAX);
       dp[0]=0;

      for(int i=1;i<=n;i++){
          for(int j=0;j<coins.size();j++){
              if(i-coins[j]>=0&&dp[i-coins[j]]!=INT_MAX){
          int ans=dp[i-coins[j]];
      dp[i]=min(dp[i],ans+1);
          }
          }  
      }
      return dp[amount];
  }

    int coinChange(vector<int>& coins, int amount) {
        // int ans=solveRecursion(coins,amount);
        // if(ans==INT_MAX){
        //     return -1;
        // }
        // return ans;
        
        // int n=amount;
        // vector<int> dp(n+1,-1);
        // int ans=solveMemoization(coins,amount,dp);
        //   if(ans==INT_MAX){
        //     return -1;
        // }
        // return ans;

      
        int ans=solveTabulation(coins,amount);
          if(ans==INT_MAX){
            return -1;
        }
        return ans;
    }
};
