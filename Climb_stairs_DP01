class Solution {
public:
//Recursive solution
// int stairs(int n){
//       if(n==0||n==1){
//           return 1;
//       } 
//       int ans=stairs(n-1)+stairs(n-2);
//    return ans;
//     }
//Dynamics Programming solution
  //Top down (Recursion + Memoisation) Solution
// int stairs(vector<int> &dp,int n){
//       if(n==0||n==1){
//           return 1;
//       } 
//       if(dp[n]!=-1){
//           return dp[n];
//       }
//      dp[n]=stairs(dp,n-1)+stairs(dp,n-2);
//    return dp[n];
//     }
 //Bottom Up(Tabulation Method) Solution
//  int stairs(int n){
//      vector<int> dp(n+1,-1);
//       dp[0]=1;
//      if(n==0){
//     return dp[0];
//  }
//   dp[1]=1;
//       if(n==1){
//           return dp[1];
//       } 
//       for(int i=2;i<=n;i++){
//      dp[i]=dp[i-1]+dp[i-2];
//       }
//    return dp[n];
//     }
 //Space Optimisation Solution
  int stairs(int n){
 int prev1=1;
 int prev2=1;
 if(n==0||n==1){
     return 1;
 }
 int curr;
  for(int i=2;i<=n;i++){
 curr=prev1+prev2;
 prev2=prev1;
 prev1=curr;
   }return curr;
  }
int climbStairs(int n) {
   vector<int> dp(n+1,-1);
   int ans= stairs(n);
   return ans;

    }
};
