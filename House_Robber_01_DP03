class Solution {
public:
//   int solveRecursion(vector<int>& nums,int n){
//       if(n<0)
//           return 0;
//       if(n==0)
//       return nums[0];
//       int include=solveRecursion(nums,n-2)+nums[n];
//       int exclude=solveRecursion(nums,n-1)+0;
//       int maxi=max(include,exclude);
//       return maxi;
//   }

//Method 02

//  int solveMemoization(vector<int>& nums,int n,vector<int> &dp){
//       if(n<0)
//           return 0;
//       if(n==0)
//       return nums[0];
//       if(dp[n]!=-1)
//       return dp[n];
//       int include=solveMemoization(nums,n-2,dp)+nums[n];
//       int exclude=solveMemoization(nums,n-1,dp)+0;
//        dp[n]=max(include,exclude);
//       return dp[n];
//   }

     //Method 03

//  int solveTabulation(vector<int>& nums,int n){
//       vector<int> dp(n+1,0);
//       dp[0]=nums[0];
//       for(int i=1;i<=n;i++){
//           int temp=0;
//           if(i-2>=0)
//           temp=dp[i-2];
//       int include=temp+nums[i];
//       int exclude=dp[i-1]+0;
//        dp[i]=max(include,exclude);
//       }
//       return dp[n];
//  }

  //Method 04

   int solveSpaceOptimization(vector<int>& nums,int n){
     int prev2=0;
     int prev1=nums[0];
     int curr=0;
      for(int i=1;i<=n;i++){
          int temp=0;
          if(i-2>=0)
          temp=prev2;
      int include=temp+nums[i];
      int exclude=prev1+0;
       curr=max(include,exclude);
       prev2=prev1;
       prev1=curr;
      }
      return prev1;
 }
    int rob(vector<int>& nums) {
        // int n=nums.size()-1;
        // int ans=solveRecursion(nums,n) ;
        // return ans;

        // int n=nums.size()-1;
        // vector<int> dp(n+1,-1);
        // int ans=solveMemoization(nums,n,dp) ;
        // return ans;

        //  int n=nums.size()-1;
        // int ans=solveTabulation(nums,n) ;
        // return ans;


         int n=nums.size()-1;
        int ans=solveSpaceOptimization(nums,n) ;
        return ans;
    }
};
